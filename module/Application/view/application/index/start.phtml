<!--Start Page, where the binge watching occurs-->
<!-- Div which provides additional data about the remaining videos-->
<div style="text-align: center; margin-top: 5px; margin-bottom: 10px;">
    <span id="numVideosRemaining"></span>
    <button id="skip" type="button" class="btn btn-default" onclick="skipCurrentVideo()">Skip</button>
</div>
<!--Div which the YouTube API replaces with an iframe player-->
<div id="player"></div>

<script>
    //get the YouTube iframe API
    var tag = document.createElement('script');
    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
    
    //get the data from the controller, creating a JavaScript array from it
    var videosString = '<?php echo $this->videosString; ?>';
    var videosArray  = videosString.split(' ');
    
    //initialize variables
    var videosIndex  = 0;
    var player;
    
    //function which is called when the page, with the YouTube iframe API, finishes loading
    function onYouTubeIframeAPIReady() {
        createPlayer();
        updateCounts();
    }
    
    //creates the YouTube player, with the current video id
    function createPlayer() {
        player = new YT.Player('player', {
                                            height: '390',
                                            width:  '640',
                                            videoId: videosArray[videosIndex],
                                            events: {
                                                        'onReady': onPlayerReady,
                                                        'onStateChange': onPlayerStateChange
                                                    }
                                          });
    }

    //function which is called when the YouTube player has its onReady event, just starts playing the video
    function onPlayerReady(event) {
        event.target.playVideo();
    }

    //function which is called when the YouTube player has its onStateChange event, checks if the video is over and if so prepares to play the next video
    function onPlayerStateChange(event) {
        if (event.data == YT.PlayerState.ENDED) {
            prepareNextVideo();
        }
    }
    
    //function which is called when the skip button is pressed, prepares to play the next video
    function skipCurrentVideo() {
        prepareNextVideo();
    }
    
    //function which prepares to play the next video, called if the current video ended or the skip button was pressed
    function prepareNextVideo() {
        player.destroy();
        videosIndex++;
        //as long as there are remaining videos, create a new player, which will have the new video id since videosIndex was incremented
        if (videosIndex < videosArray.length) {
            createPlayer();
            updateCounts();
            //if this is the last video in the array, no need to skip
            if ((videosIndex + 1) == videosArray.length) {
                $('#skip').hide();
            }
        }
    }
    
    //function which updates the data div
    function updateCounts() {
        var currentVideoMessage = "Current video: ".concat(videosArray[videosIndex]).concat(" ");
        
        var remainingNumVideos  = videosArray.length - videosIndex - 1; //subtract 1 to not count the current video
        
        var remainingNumMessage = " videos remaining";
        //check grammar, might not need the plural 'videos'
        if (remainingNumVideos == 1) {
            remainingNumMessage = " video remaining";
        }
        
        //create the full message, by converting number to string and concatenating
        var fullMessage = currentVideoMessage.concat(String(remainingNumVideos)).concat(remainingNumMessage);
        //change the text to this updated message
        $('#numVideosRemaining').text(fullMessage);
    }
</script>
